package main

import (
	"database/sql"
	"fmt"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
)

const serverTable = "servers"

const serverTableSchema = "id INT NOT NULL AUTO_INCREMENT, " +
	"name VARCHAR(64) NOT NULL, " +
	"directory VARCHAR(256) NOT NULL, " +
	"jarfile VARCHAR(64) NOT NULL, " +
	"runmemory VARCHAR(8) NOT NULL, " +
	"startmemory VARCHAR(8) NOT NULL, " +
	"javaargs VARCHAR(256), " +
	"PRIMARY KEY (id)"

// id is omitted since it is generated by the database
const serverTableColumns = "name,directory,jarfile,runmemory,startmemory,javaargs"

type databaseServer struct {
	ID          int            `json:"id"`
	Name        string         `json:"name"`
	Directory   string         `json:"directory"`
	JarFile     string         `json:"jar_file"`
	RunMemory   string         `json:"run_memory"`
	StartMemory string         `json:"start_memory"`
	JavaArgs    sql.NullString `json:"java_args"`
}

var db *sqlx.DB

func databaseSetup() {
	db, err := sqlx.Open("mysql", config.Database.DatabaseUser+":"+config.Database.DatabasePassword+
		"@("+config.Database.DatabaseHost+":"+fmt.Sprint(config.Database.DatabasePort)+")"+"/")
	if err != nil {
		panic(err)
	}

	defer db.Close()

	err = db.Ping()
	if err != nil {
		panic(err)
	}

	_, err = db.Exec("CREATE DATABASE " + config.Database.DatabaseDatabase)
	if err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println("Successfully created database..")
	}

	_, err = db.Exec("USE " + config.Database.DatabaseDatabase)
	if err != nil {
		fmt.Println(err)
	}

	_, err = db.Exec("CREATE TABLE " + serverTable + "(" + serverTableSchema + ")")
}

func connectDatabase() {
	tempdb, err := sqlx.Open("mysql", config.Database.DatabaseUser+":"+config.Database.DatabasePassword+
		"@("+config.Database.DatabaseHost+":"+fmt.Sprint(config.Database.DatabasePort)+")"+
		"/"+config.Database.DatabaseDatabase)
	if err != nil {
		panic(err)
	}

	db = tempdb

	// TODO: How to make this extend to life of daemon
	// defer db.Close()

	err = db.Ping()
	if err != nil {
		panic(err)
	}

	db.SetConnMaxLifetime(time.Minute * 3)
	db.SetMaxOpenConns(10)
	db.SetMaxIdleConns(10)
}

func getServerData(id int) (*databaseServer, error) {
	result, err := db.Queryx("SELECT * FROM " + serverTable + " WHERE `id` = " + fmt.Sprint(id))
	if err != nil {
		return nil, err
	}

	defer result.Close()

	var server databaseServer
	for result.Next() {
		if err := result.StructScan(&server); err != nil {
			return nil, err
		}
	}

	return &server, nil
}

func requestServer2String(server requestServer) string {
	if len(server.JavaArgs) > 0 {
		return "\"" + server.Name + "\",\"" + server.Directory + "\",\"" + server.JarFile + "\",\"" + server.RunMemory + "\",\"" + server.StartMemory + "\",\"" + server.JavaArgs + "\""
	}

	return "\"" + server.Name + "\",\"" + server.Directory + "\",\"" + server.JarFile + "\",\"" + server.RunMemory + "\",\"" + server.StartMemory + "\",null"
}

func addServer2Database(server requestServer) {
	_, err := db.Exec("INSERT INTO " + serverTable + "(" + serverTableColumns + ") " +
		"VALUES (" + requestServer2String(server) + ")")
	if err != nil {
		fmt.Println(err)
	}
}
